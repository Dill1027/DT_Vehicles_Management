import { vehicleService } from './vehicleService';
import notificationService from './notificationService';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

const reportService = {
  // Generate PDF report with professional formatting
  generatePDF: (title, data, columns = [], rows = []) => {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      
      // Header with company name
      doc.setFontSize(20);
      doc.setFont(undefined, 'bold');
      doc.text('DEEP TEC VEHICLES', pageWidth / 2, 20, { align: 'center' });
      
      doc.setFontSize(14);
      doc.setFont(undefined, 'normal');
      doc.text(title, pageWidth / 2, 35, { align: 'center' });
      
      // Generate date
      doc.setFontSize(10);
      doc.text(`Generate Date: ${new Date().toLocaleDateString()}`, 20, 50);
      
      // Summary Status
      let yPosition = 65;
      if (data.summary) {
        doc.setFontSize(12);
        doc.setFont(undefined, 'bold');
        doc.text('Summary Status:', 20, yPosition);
        
        yPosition += 15;
        doc.setFontSize(10);
        doc.setFont(undefined, 'normal');
        
        // Display summary in the exact format requested
        const summaryItems = [
          `Total Vehicle: ${data.summary.totalVehicles || 0}`,
          `Active Vehicle: ${data.summary.activeVehicles || 0}`,
          `In Use Vehicle: ${data.summary.inUseVehicles || 0}`,
          `Maintenance Vehicle: ${data.summary.maintenanceVehicles || 0}`,
          `License Expire Soon Vehicle: ${data.summary.licenseExpireSoon || 0}`,
          `License Expired Vehicle: ${data.summary.licenseExpired || 0}`,
          `Insurance Expire Soon Vehicle: ${data.summary.insuranceExpireSoon || 0}`,
          `Insurance Expired Vehicle: ${data.summary.insuranceExpired || 0}`
        ];
        
        summaryItems.forEach((item, index) => {
          doc.text(item, 25, yPosition + (index * 8));
        });
        
        yPosition += (summaryItems.length * 8) + 15;
      }
      
      // Data table if provided
      if (columns.length > 0 && rows.length > 0) {
        autoTable(doc, {
          head: [columns],
          body: rows,
          startY: yPosition,
          styles: {
            fontSize: 9,
            cellPadding: 3
          },
          headStyles: {
            fillColor: [41, 128, 185],
            textColor: 255,
            fontStyle: 'bold'
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245]
          },
          margin: { left: 20, right: 20 },
          tableWidth: 'auto',
          columnStyles: {
            0: { cellWidth: 'auto' },
            1: { cellWidth: 'auto' },
            2: { cellWidth: 'auto' },
            3: { cellWidth: 'auto' }
          }
        });
      }
      
      // Footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.text(
          `Page ${i} of ${pageCount}`,
          pageWidth / 2,
          pageHeight - 10,
          { align: 'center' }
        );
        doc.text(
          'Generated by Deep Tec Vehicle Management System',
          pageWidth - 20,
          pageHeight - 10,
          { align: 'right' }
        );
      }
      
      // Download the PDF
      const fileName = `${title.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);
      
      return { success: true, fileName };
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Failed to generate PDF report');
    }
  },

  // Download vehicle summary report
  downloadVehicleSummaryReport: async () => {
    try {
      // Get all data needed for the report
      const [vehiclesResponse, insuranceResponse, licenseResponse] = await Promise.all([
        vehicleService.getAllVehicles(),
        notificationService.getInsuranceExpiryAlerts(30),
        notificationService.getLicenseExpiryAlerts(30)
      ]);
      
      const vehicles = vehiclesResponse.data || [];
      const insuranceAlerts = insuranceResponse.data || [];
      const licenseAlerts = licenseResponse.data || [];
      
      // Calculate expired and expiring counts
      const insuranceExpired = insuranceAlerts.filter(alert => alert.isExpired).length;
      const insuranceExpireSoon = insuranceAlerts.filter(alert => !alert.isExpired).length;
      const licenseExpired = licenseAlerts.filter(alert => alert.isExpired).length;
      const licenseExpireSoon = licenseAlerts.filter(alert => !alert.isExpired).length;
      
      // Prepare summary data in the exact format requested
      const summary = {
        totalVehicles: vehicles.length,
        activeVehicles: vehicles.filter(v => v.status === 'Active' || v.status === 'Available').length,
        inUseVehicles: vehicles.filter(v => v.status === 'In Use' || v.status === 'In Service').length,
        maintenanceVehicles: vehicles.filter(v => v.status === 'Maintenance').length,
        licenseExpireSoon: licenseExpireSoon,
        licenseExpired: licenseExpired,
        insuranceExpireSoon: insuranceExpireSoon,
        insuranceExpired: insuranceExpired
      };
      
      // Prepare table data with the exact columns requested
      const columns = [
        'Vehicle Number',
        'Insurance Date',
        'License Date',
        'Last Update Date'
      ];
      
      const rows = vehicles.map(vehicle => [
        vehicle.vehicleNumber || vehicle.vehicleId || 'N/A',
        vehicle.insuranceExpiry ? new Date(vehicle.insuranceExpiry).toLocaleDateString() : 'N/A',
        vehicle.licenseExpiry ? new Date(vehicle.licenseExpiry).toLocaleDateString() : 'N/A',
        vehicle.updatedAt ? new Date(vehicle.updatedAt).toLocaleDateString() : 'N/A'
      ]);
      
      reportService.generatePDF(
        'Vehicle Summary Report',
        { summary },
        columns,
        rows
      );
      
      return { success: true };
    } catch (error) {
      console.error('Error downloading vehicle summary report:', error);
      throw new Error('Failed to generate vehicle summary report');
    }
  },

  // Download expiry alerts report
  downloadExpiryAlertsReport: async (days = 30) => {
    try {
      // Get both insurance and license alerts
      const [insuranceResponse, licenseResponse] = await Promise.all([
        notificationService.getInsuranceExpiryAlerts(days),
        notificationService.getLicenseExpiryAlerts(days)
      ]);
      
      const insuranceAlerts = insuranceResponse.data || [];
      const licenseAlerts = licenseResponse.data || [];
      
      // Combine all alerts
      const allAlerts = [
        ...insuranceAlerts.map(alert => ({
          ...alert,
          documentType: 'Insurance'
        })),
        ...licenseAlerts.map(alert => ({
          ...alert,
          documentType: 'License'
        }))
      ];
      
      // Sort by expiry date (expired first, then by days until expiry)
      allAlerts.sort((a, b) => {
        if (a.isExpired && !b.isExpired) return -1;
        if (!a.isExpired && b.isExpired) return 1;
        return (a.daysUntilExpiry || 0) - (b.daysUntilExpiry || 0);
      });
      
      // Prepare summary data
      const summary = {
        totalAlerts: allAlerts.length,
        expiredDocuments: allAlerts.filter(alert => alert.isExpired).length,
        expiringDocuments: allAlerts.filter(alert => !alert.isExpired).length,
        insuranceAlerts: insuranceAlerts.length,
        licenseAlerts: licenseAlerts.length,
        reportPeriod: `Next ${days} days`
      };
      
      // Prepare table data
      const columns = [
        'Vehicle Number',
        'Document Type',
        'Expiry Date',
        'Days Until Expiry',
        'Status'
      ];
      
      const rows = allAlerts.map(alert => [
        alert.vehicleNumber || 'N/A',
        alert.documentType,
        alert.expiryDate ? new Date(alert.expiryDate).toLocaleDateString() : 'N/A',
        alert.isExpired ? 'EXPIRED' : `${alert.daysUntilExpiry || 0} days`,
        alert.isExpired ? 'EXPIRED' : 'Expiring Soon'
      ]);
      
      reportService.generatePDF(
        'Document Expiry Report',
        { summary },
        columns,
        rows
      );
      
      return { success: true };
    } catch (error) {
      console.error('Error downloading expiry alerts report:', error);
      throw new Error('Failed to generate expiry alerts report');
    }
  },

  // Get report statistics
  getReportStatistics: async () => {
    try {
      const vehiclesResponse = await vehicleService.getAllVehicles();
      const vehicles = vehiclesResponse.data || [];
      
      return { 
        success: true, 
        data: {
          totalVehicles: vehicles.length,
          reportsGenerated: 42,
          lastReportDate: new Date().toISOString(),
          vehiclesByStatus: {
            active: vehicles.filter(v => v.status === 'Active' || v.status === 'Available').length,
            'in-service': vehicles.filter(v => v.status === 'In Use' || v.status === 'In Service').length,
            'out-of-service': vehicles.filter(v => v.status === 'Out of Service').length,
            maintenance: vehicles.filter(v => v.status === 'Maintenance').length,
            retired: vehicles.filter(v => v.status === 'Retired').length,
            pending: vehicles.filter(v => v.status === 'Pending').length
          }
        }
      };
    } catch (error) {
      console.error('Error fetching report statistics:', error);
      return { success: false, data: null };
    }
  },

  // Generate custom report
  generateCustomReport: async (reportConfig) => {
    try {
      const customData = {
        summary: {
          reportType: 'Custom Report',
          generatedAt: new Date().toISOString(),
          configuration: JSON.stringify(reportConfig, null, 2)
        }
      };
      
      reportService.generatePDF(
        'Custom Report',
        customData,
        ['Configuration', 'Value'],
        Object.entries(reportConfig).map(([key, value]) => [
          key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),
          typeof value === 'object' ? JSON.stringify(value) : String(value)
        ])
      );
      
      return { success: true };
    } catch (error) {
      console.error('Error generating custom report:', error);
      throw new Error('Failed to generate custom report');
    }
  }
};

export default reportService;
